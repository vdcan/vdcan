@{
    Layout = "~/Views/Home/_main_layout.cshtml";
}
@section head{
    <style>
        .main_div {
            font-size: 15px;
        }

            .main_div li {
                text-decoration: none;
                margin-left: 20px;
            }

        .half_l {
            width: 50%;
            float: left;
            padding-right: 20px;
        }
    </style>
}

@section scripts{

}

<section id="team" class="page-section">
    <div class="container main_div">
        <div class=" ">




            <h3> JSSQL框架.</h3>
            该框架是在mvc框架进行改进的框架. 它继承了mvc 的优点<br />
            <ul class="">
                <li>
                    一个模型提供不同的多个视图表现形式.
                </li>
                <li>
                    模型可复用
                </li>
                <li>
                    提高开发效率
                </li>

            </ul>
            通过该框架自带的程序生成器, 和存储过程解决了原有mvc的几个不足<br />
            <ul>
                <li>
                    通过程序生成器,自动生成相应程序, 存储过程 解决了原有mvc系统结构和实现的复杂的问题。
                </li>

                <li>
                    通过透明调用存储过程, 解决了视图与控制器间的过于紧密的连接问题。
                </li>

                <li>
                    通过存储过程和viewdata减少了数据的调用, 将大量数据计算查询在数据库端实现, 解决了视图对模型数据的低效率访问。
                </li>
            </ul>

            除此之外该框架还有以下的优点<br />
            <ul class="">
                <li>
                    无需开发环境. 基本功能不需更改程序, 只要更改JS和sql即可.
                </li>
                <li>
                    跨语言, 该框架支持c#, php(正在开发), java(正在开发), 由于中间层透明, 可以很容易做到一次开发, 多语言, 多平台支持.
                </li>
                <li>
                    嵌入式系统支持,由于支持php(正在开发), java(正在开发), 占用资源少, 该系统很容易发布在linux嵌入式系统上.
                </li>

            </ul>

            刚刚接触.net mvc框架时. 感觉它的三层框架比较麻烦. 一个页面会涉及5个文件<br />
            <ul>
                <li>
                    Cshtml 用于页面的布局,
                </li>

                <li>
                    Js 页面数据的显示,操作,主要通过jquery easyui 实现,
                </li>

                <li>
                    Entity 实体和表格映射,
                </li>

                <li>
                    service 操作数据,对数据进行增删改, 查询,
                </li>

                <li>
                    controller 连接页面和service.
                </li>

            </ul>

            虽然可以用程序生成器生成这5个文件, 但修改页面是就比较麻烦.一个简单的表改动会涉及5个文件<br />

            经过一段时间使用后, 我发现 entity, service, controller 可以合在一起, 并且与页面无关. 就是说一个controller可以对应多个页面, 而所有数据库逻辑操作, 通过存储过程实现. 页面和存储过程之间的关系存在表vd_action中. 于是现在的结构就变成了<br />


            <ul>
                <li>
                    Cshtml 用于页面的布局,
                </li>

                <li>
                    Js 页面数据的显示,操作,主要通过jquery easyui 实现,
                </li>

                <li>
                    Stored procedure, 操作数据,对数据进行增删改, 查询,
                </li>
            </ul>
            通过传递参数调用控制器, 来显示不同的页面. 例如控制器名为base参数为mc.
            <br />
            http://localhost/base?mc=menu_admin. 框架将显示base控制器下的menu_admin.cshtml页面.
            <br />
            而其中对应的存储过程存在表action中
            <br />
            <br />

            Js 可以通过http://localhost/base/listDT?mc=menu_admin&b=Role_list调用存储过程
            <br />
            vdp_Role_list 并将结果以datatable的json 形式返回.
            <br />


        </div>


 
    </div>
    <!--/.container-->
</section>
